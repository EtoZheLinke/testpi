from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8050406720:AAFO0osjB7z1v_6qmVKGyHtlxNGuZQz2Tyk"
GROUP_CHAT_ID =-1002604959885  # id –≥—Ä—É–ø–ø—ã

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìñ –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —Ä–∞—Å", url='https://docs.google.com/document/d/1uEnVPa3f5TcSonOhapcRf0s-ZF0Qzw086TSiayRdICk/edit?usp=sharing')],
        [InlineKeyboardButton("‚úÖ –•–æ—á—É –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä", callback_data='join_server')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    if update.message:
        try:
            with open("minecraft_title4.png", "rb") as image:
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª minecraft_title4.png –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = "–ü—Ä–∏–≤–µ—Ç! –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ä–∞—Å–∞–º–∏, –∞ –ø–æ—Ç–æ–º –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ:"
        await update.message.reply_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'join_server':
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=(
                 "–ò—Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n"
                 "1. –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ\n"
                 "2. –ù–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, –∞ —Ç–∞–∫ –∂–µ –æ—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
                 "3. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Ä–∞—Å—É"
            )
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫–µ
async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.chat and update.message.chat.type == "private":
        user = update.message.from_user
        text = update.message.text

        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.first_name}:\n{text}"
            )
            await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception as e:
            logger.error(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        logger.info("[DEBUG] –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_private_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
